/*
 * This file was automatically generated by EvoSuite
 * Mon May 25 19:43:01 GMT 2020
 */

package name.abuchen.portfolio.snapshot.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import name.abuchen.portfolio.model.Account;
import name.abuchen.portfolio.model.AccountTransaction;
import name.abuchen.portfolio.model.Security;
import name.abuchen.portfolio.money.Money;
import name.abuchen.portfolio.snapshot.security.DividendTransaction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DividendTransaction_ESTest extends DividendTransaction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      Money money0 = Money.of("name.abuchen.portfolio.snapshot.security.DividendTransaction", 0L);
      dividendTransaction0.setFifoCost(money0);
      double double0 = dividendTransaction0.getPersonalDividendYield();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      dividendTransaction0.setCurrencyCode("");
      long long0 = dividendTransaction0.getGrossValueAmount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Security security0 = new Security();
      AccountTransaction.Type accountTransaction_Type0 = AccountTransaction.Type.INTEREST;
      AccountTransaction accountTransaction0 = new AccountTransaction((LocalDateTime) null, "", 2395L, security0, accountTransaction_Type0);
      DividendTransaction dividendTransaction0 = DividendTransaction.from(accountTransaction0);
      long long0 = dividendTransaction0.getGrossValueAmount();
      assertEquals(2395L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      dividendTransaction0.setCurrencyCode("ue}U>Y#%Io]VxBL");
      dividendTransaction0.setAmount((-1848L));
      long long0 = dividendTransaction0.getGrossValueAmount();
      assertEquals((-1848L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      dividendTransaction0.setCurrencyCode("z-");
      Money money0 = dividendTransaction0.getGrossValue();
      assertTrue(money0.isZero());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Security security0 = new Security();
      AccountTransaction.Type accountTransaction_Type0 = AccountTransaction.Type.INTEREST;
      AccountTransaction accountTransaction0 = new AccountTransaction((LocalDateTime) null, "", 2395L, security0, accountTransaction_Type0);
      DividendTransaction dividendTransaction0 = DividendTransaction.from(accountTransaction0);
      Money money0 = dividendTransaction0.getGrossValue();
      assertTrue(money0.isPositive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      dividendTransaction0.setShares((-1848L));
      dividendTransaction0.setCurrencyCode("name.abuchen.portfolio.snapshot.security.DividendTransaction");
      dividendTransaction0.setAmount((-1848L));
      long long0 = dividendTransaction0.getDividendPerShare();
      assertEquals(1000000000L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      Account account0 = new Account();
      dividendTransaction0.setAccount(account0);
      Account account1 = dividendTransaction0.getAccount();
      assertEquals("00000000-0100-4000-8200-000003000000", account1.getUUID());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(11, 11, 1);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      Security security0 = new Security("name.abuchen.portfolio.snapshot.security.DividendTransaction", "name.abuchen.portfolio.snapshot.security.DividendTransaction");
      AccountTransaction.Type accountTransaction_Type0 = AccountTransaction.Type.INTEREST;
      AccountTransaction accountTransaction0 = new AccountTransaction(localDateTime0, "n8}yU_(M[A1WhE}wT$)", 0L, security0, accountTransaction_Type0);
      DividendTransaction dividendTransaction0 = DividendTransaction.from(accountTransaction0);
      assertEquals(0L, dividendTransaction0.getShares());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Security security0 = new Security((String) null, (String) null, (String) null, "-q");
      AccountTransaction.Type accountTransaction_Type0 = AccountTransaction.Type.INTEREST;
      AccountTransaction accountTransaction0 = new AccountTransaction(localDateTime0, (String) null, (-2147483639), security0, accountTransaction_Type0);
      DividendTransaction dividendTransaction0 = DividendTransaction.from(accountTransaction0);
      assertEquals(0L, dividendTransaction0.getShares());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = DividendTransaction.amountFractionPerShare(1106L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = DividendTransaction.amountFractionPerShare((-1827L), 1743L);
      assertEquals((-1048192771L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        DividendTransaction.from((AccountTransaction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("name.abuchen.portfolio.snapshot.security.DividendTransaction", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      // Undeclared exception!
      try { 
        dividendTransaction0.getGrossValueAmount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      dividendTransaction0.setCurrencyCode("ue}U>Y#%Io]VxBL");
      long long0 = dividendTransaction0.getDividendPerShare();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = DividendTransaction.amountFractionPerShare((-625L), (-625L));
      assertEquals(1000000000L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      double double0 = dividendTransaction0.getPersonalDividendYieldMovingAverage();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      dividendTransaction0.setShares(1L);
      Money money0 = Money.of("name.abuchen.portfolio.snapshot.security.DividendTransaction", 1L);
      dividendTransaction0.setFifoCost(money0);
      // Undeclared exception!
      try { 
        dividendTransaction0.getPersonalDividendYield();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      Money money0 = Money.of("name.abuchen.portfolio.snapshot.security.DividendTransaction", (-8L));
      dividendTransaction0.setFifoCost(money0);
      double double0 = dividendTransaction0.getPersonalDividendYield();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      double double0 = dividendTransaction0.getPersonalDividendYield();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Security security0 = new Security();
      AccountTransaction.Type accountTransaction_Type0 = AccountTransaction.Type.INTEREST;
      AccountTransaction accountTransaction0 = new AccountTransaction((LocalDateTime) null, "", 2395L, security0, accountTransaction_Type0);
      DividendTransaction dividendTransaction0 = DividendTransaction.from(accountTransaction0);
      dividendTransaction0.setAmount((-620L));
      Money money0 = dividendTransaction0.getGrossValue();
      assertTrue(money0.isNegative());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Security security0 = new Security((String) null, ";xf]?J~G.#6");
      AccountTransaction.Type accountTransaction_Type0 = AccountTransaction.Type.SELL;
      AccountTransaction accountTransaction0 = new AccountTransaction((LocalDateTime) null, "", 1980L, security0, accountTransaction_Type0);
      // Undeclared exception!
      try { 
        DividendTransaction.from(accountTransaction0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("name.abuchen.portfolio.snapshot.security.DividendTransaction", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Security security0 = new Security((String) null, ";xf]?J~G.#6");
      AccountTransaction.Type accountTransaction_Type0 = AccountTransaction.Type.DIVIDENDS;
      AccountTransaction accountTransaction0 = new AccountTransaction((LocalDateTime) null, "", 46L, security0, accountTransaction_Type0);
      DividendTransaction dividendTransaction0 = DividendTransaction.from(accountTransaction0);
      assertEquals(0L, dividendTransaction0.getShares());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      dividendTransaction0.setMovingAverageCost((Money) null);
      assertNull(dividendTransaction0.getNote());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      Money money0 = dividendTransaction0.getMovingAverageCost();
      assertNull(money0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      Money money0 = dividendTransaction0.getFifoCost();
      assertNull(money0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      // Undeclared exception!
      try { 
        dividendTransaction0.getDividendPerShare();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      // Undeclared exception!
      try { 
        dividendTransaction0.getGrossValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      dividendTransaction0.setTotalShares((-159L));
      assertNull(dividendTransaction0.getCurrencyCode());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      Account account0 = dividendTransaction0.getAccount();
      assertNull(account0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      Money money0 = Money.of("name.abuchen.portfolio.snapshot.security.DividendTransaction", 1L);
      dividendTransaction0.setFifoCost(money0);
      // Undeclared exception!
      try { 
        dividendTransaction0.getPersonalDividendYield();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
