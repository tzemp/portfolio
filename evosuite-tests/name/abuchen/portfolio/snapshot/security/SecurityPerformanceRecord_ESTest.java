/*
 * This file was automatically generated by EvoSuite
 * Mon May 25 19:44:23 GMT 2020
 */

package name.abuchen.portfolio.snapshot.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.time.chrono.ChronoLocalDate;
import java.util.List;
import name.abuchen.portfolio.model.AccountTransaction;
import name.abuchen.portfolio.model.BuySellEntry;
import name.abuchen.portfolio.model.Client;
import name.abuchen.portfolio.model.Security;
import name.abuchen.portfolio.model.SecurityPrice;
import name.abuchen.portfolio.model.Transaction;
import name.abuchen.portfolio.money.CurrencyConverter;
import name.abuchen.portfolio.money.Money;
import name.abuchen.portfolio.money.Quote;
import name.abuchen.portfolio.snapshot.security.SecurityPerformanceRecord;
import name.abuchen.portfolio.util.Interval;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SecurityPerformanceRecord_ESTest extends SecurityPerformanceRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Security security0 = new Security((String) null, (String) null, (String) null, "9PJ(~:AWAba4=1");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      String string0 = securityPerformanceRecord0.getSecurityName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Security security0 = new Security("", "");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      String string0 = securityPerformanceRecord0.getSecurityName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, (Security) null);
      Security security0 = securityPerformanceRecord0.getSecurity();
      assertNull(security0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, (Security) null);
      // Undeclared exception!
      try { 
        securityPerformanceRecord0.getNote();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("name.abuchen.portfolio.snapshot.security.SecurityPerformanceRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Security security0 = new Security("u)0Q]", "u)0Q]", "u)0Q]", "u)0Q]");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      Security security1 = securityPerformanceRecord0.getSecurity();
      assertNull(security1.getTargetCurrencyCode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Security security0 = new Security();
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Interval interval0 = Interval.of(localDate0, localDate0);
      securityPerformanceRecord0.calculate((Client) null, (CurrencyConverter) null, interval0);
      assertEquals(0.0, securityPerformanceRecord0.getTrueTimeWeightedRateOfReturn(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Security security0 = new Security("u)0Q]", "u)0Q]", "u)0Q]", "u)0Q]");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      Class<Security> class0 = Security.class;
      Security security1 = securityPerformanceRecord0.adapt(class0);
      assertNull(security1.getLatestFeed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Security security0 = new Security("-", "-");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ChronoLocalDate chronoLocalDate0 = securityPerformanceRecord0.adapt(class0);
      assertNull(chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Security security0 = new Security("-", "-");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      double double0 = securityPerformanceRecord0.getTotalRateOfReturnDivMovingAverage();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, (Security) null);
      double double0 = securityPerformanceRecord0.getTotalRateOfReturnDiv();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SecurityPerformanceRecord.Periodicity securityPerformanceRecord_Periodicity0 = SecurityPerformanceRecord.Periodicity.UNKNOWN;
      String string0 = securityPerformanceRecord_Periodicity0.toString();
      assertEquals("unknown", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Security security0 = new Security();
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      Quote quote0 = securityPerformanceRecord0.getFifoCostPerSharesHeld();
      assertNull(quote0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, (Security) null);
      Money money0 = securityPerformanceRecord0.getCapitalGainsOnHoldingsMovingAverage();
      assertNull(money0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Security security0 = new Security();
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      int int0 = securityPerformanceRecord0.getDividendEventCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Security security0 = new Security("-", "-");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      String string0 = securityPerformanceRecord0.getSecurityName();
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Security security0 = new Security("0", "0", "0", "IRREGULAR");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      String string0 = securityPerformanceRecord0.getNote();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Security security0 = new Security("-", "-");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      double double0 = securityPerformanceRecord0.getCapitalGainsOnHoldingsPercent();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Security security0 = new Security("-", "-");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      Money money0 = securityPerformanceRecord0.getCapitalGainsOnHoldings();
      assertNull(money0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Security security0 = new Security("IQbCC|u", "name.abuchen.portfolio.money.Values$17");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      Money money0 = securityPerformanceRecord0.getTaxes();
      assertNull(money0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, (Security) null);
      double double0 = securityPerformanceRecord0.getTrueTimeWeightedRateOfReturn();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Security security0 = new Security();
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      SecurityPerformanceRecord.Periodicity securityPerformanceRecord_Periodicity0 = securityPerformanceRecord0.getPeriodicity();
      assertEquals(SecurityPerformanceRecord.Periodicity.UNKNOWN, securityPerformanceRecord_Periodicity0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Security security0 = new Security("-", "-");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      // Undeclared exception!
      try { 
        securityPerformanceRecord0.getQuote();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("name.abuchen.portfolio.snapshot.security.SecurityPerformanceRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Security security0 = new Security();
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      // Undeclared exception!
      try { 
        securityPerformanceRecord0.getSemiVolatility();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("name.abuchen.portfolio.snapshot.security.SecurityPerformanceRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Security security0 = new Security();
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      int int0 = securityPerformanceRecord0.getPeriodicitySort();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, (Security) null);
      // Undeclared exception!
      try { 
        securityPerformanceRecord0.getVolatility();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("name.abuchen.portfolio.snapshot.security.SecurityPerformanceRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Security security0 = new Security();
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      Money money0 = securityPerformanceRecord0.getMovingAverageCost();
      assertNull(money0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Security security0 = new Security("-", "-");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      double double0 = securityPerformanceRecord0.getRateOfReturnPerYear();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, (Security) null);
      Quote quote0 = securityPerformanceRecord0.getMovingAverageCostPerSharesHeld();
      assertNull(quote0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Security security0 = new Security("0", "0", "0", "IRREGULAR");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      Money money0 = securityPerformanceRecord0.getSumOfDividends();
      assertNull(money0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Security security0 = new Security();
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      long long0 = securityPerformanceRecord0.getSharesHeld();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Security security0 = new Security();
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      BuySellEntry buySellEntry0 = new BuySellEntry();
      AccountTransaction accountTransaction0 = buySellEntry0.getAccountTransaction();
      securityPerformanceRecord0.addTransaction(accountTransaction0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Interval interval0 = Interval.of(localDate0, localDate0);
      // Undeclared exception!
      try { 
        securityPerformanceRecord0.calculate((Client) null, (CurrencyConverter) null, interval0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("name.abuchen.portfolio.snapshot.security.Calculation", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Security security0 = new Security((String) null, (String) null, (String) null, "9PJ(~:AWAba4=1");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      // Undeclared exception!
      try { 
        securityPerformanceRecord0.getMaxDrawdown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("name.abuchen.portfolio.snapshot.security.SecurityPerformanceRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Security security0 = new Security();
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      List<Transaction> list0 = securityPerformanceRecord0.getTransactions();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Security security0 = new Security("0", "0", "0", "IRREGULAR");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      SecurityPrice securityPrice0 = securityPerformanceRecord0.getLatestSecurityPrice();
      assertNull(securityPrice0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Security security0 = new Security();
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      LocalDate localDate0 = securityPerformanceRecord0.getLastDividendPayment();
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, (Security) null);
      // Undeclared exception!
      try { 
        securityPerformanceRecord0.getMaxDrawdownDuration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("name.abuchen.portfolio.snapshot.security.SecurityPerformanceRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Security security0 = new Security();
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      Money money0 = securityPerformanceRecord0.getMarketValue();
      assertNull(money0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Security security0 = new Security("-", "-");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      double double0 = securityPerformanceRecord0.getDeltaPercent();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Security security0 = new Security("-", "-");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      Money money0 = securityPerformanceRecord0.getFees();
      assertNull(money0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Security security0 = new Security();
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      Money money0 = securityPerformanceRecord0.getDelta();
      assertNull(money0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, (Security) null);
      double double0 = securityPerformanceRecord0.getCapitalGainsOnHoldingsMovingAveragePercent();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Security security0 = new Security("u)0Q]", "u)0Q]", "u)0Q]", "u)0Q]");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      Money money0 = securityPerformanceRecord0.getFifoCost();
      assertNull(money0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Security security0 = new Security("-", "-");
      SecurityPerformanceRecord securityPerformanceRecord0 = new SecurityPerformanceRecord((Client) null, security0);
      double double0 = securityPerformanceRecord0.getIrr();
      assertEquals(0.0, double0, 0.01);
  }
}
