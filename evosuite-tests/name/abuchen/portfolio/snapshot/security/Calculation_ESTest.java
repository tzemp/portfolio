/*
 * This file was automatically generated by EvoSuite
 * Mon May 25 19:39:44 GMT 2020
 */

package name.abuchen.portfolio.snapshot.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.LinkedList;
import java.util.List;
import name.abuchen.portfolio.model.AccountTransaction;
import name.abuchen.portfolio.model.PortfolioTransaction;
import name.abuchen.portfolio.model.Security;
import name.abuchen.portfolio.model.Transaction;
import name.abuchen.portfolio.money.CurrencyConverter;
import name.abuchen.portfolio.snapshot.security.Calculation;
import name.abuchen.portfolio.snapshot.security.CostCalculation;
import name.abuchen.portfolio.snapshot.security.DeltaCalculation;
import name.abuchen.portfolio.snapshot.security.DividendCalculation;
import name.abuchen.portfolio.snapshot.security.DividendFinalTransaction;
import name.abuchen.portfolio.snapshot.security.DividendInitialTransaction;
import name.abuchen.portfolio.snapshot.security.DividendTransaction;
import name.abuchen.portfolio.snapshot.security.IRRCalculation;
import name.abuchen.portfolio.snapshot.security.SharesHeldCalculation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Calculation_ESTest extends Calculation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DividendCalculation dividendCalculation0 = new DividendCalculation();
      dividendCalculation0.setTermCurrency("y&3kBB*T");
      String string0 = dividendCalculation0.getTermCurrency();
      assertEquals("y&3kBB*T", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SharesHeldCalculation sharesHeldCalculation0 = new SharesHeldCalculation();
      sharesHeldCalculation0.setTermCurrency("");
      String string0 = sharesHeldCalculation0.getTermCurrency();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IRRCalculation iRRCalculation0 = new IRRCalculation();
      Security security0 = new Security("", "", "K.|5Ge3o+/`YBw", (String) null);
      iRRCalculation0.setSecurity(security0);
      Security security1 = iRRCalculation0.getSecurity();
      assertFalse(security1.isExchangeRate());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CostCalculation costCalculation0 = new CostCalculation();
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      // Undeclared exception!
      try { 
        costCalculation0.visit((CurrencyConverter) null, dividendTransaction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("name.abuchen.portfolio.model.Transaction", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeltaCalculation deltaCalculation0 = new DeltaCalculation();
      // Undeclared exception!
      try { 
        deltaCalculation0.visit((CurrencyConverter) null, (DividendInitialTransaction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("name.abuchen.portfolio.snapshot.security.DeltaCalculation", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IRRCalculation iRRCalculation0 = new IRRCalculation();
      PortfolioTransaction portfolioTransaction0 = new PortfolioTransaction();
      // Undeclared exception!
      try { 
        iRRCalculation0.visit((CurrencyConverter) null, portfolioTransaction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("name.abuchen.portfolio.snapshot.security.IRRCalculation", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DividendCalculation dividendCalculation0 = new DividendCalculation();
      String string0 = dividendCalculation0.getTermCurrency();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DividendCalculation dividendCalculation0 = new DividendCalculation();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(8, 8);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(1L, 8, zoneOffset0);
      AccountTransaction.Type accountTransaction_Type0 = AccountTransaction.Type.DEPOSIT;
      AccountTransaction accountTransaction0 = new AccountTransaction(localDateTime0, (String) null, 627L, (Security) null, accountTransaction_Type0);
      dividendCalculation0.visit((CurrencyConverter) null, accountTransaction0);
      assertEquals(0, dividendCalculation0.getNumOfEvents());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DividendCalculation dividendCalculation0 = new DividendCalculation();
      LinkedList<DividendFinalTransaction> linkedList0 = new LinkedList<DividendFinalTransaction>();
      linkedList0.add((DividendFinalTransaction) null);
      // Undeclared exception!
      try { 
        dividendCalculation0.visitAll((CurrencyConverter) null, linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("name.abuchen.portfolio.snapshot.security.Calculation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SharesHeldCalculation sharesHeldCalculation0 = new SharesHeldCalculation();
      LinkedList<PortfolioTransaction> linkedList0 = new LinkedList<PortfolioTransaction>();
      PortfolioTransaction portfolioTransaction0 = new PortfolioTransaction();
      linkedList0.add(portfolioTransaction0);
      // Undeclared exception!
      try { 
        sharesHeldCalculation0.visitAll((CurrencyConverter) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("name.abuchen.portfolio.snapshot.security.SharesHeldCalculation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SharesHeldCalculation sharesHeldCalculation0 = new SharesHeldCalculation();
      sharesHeldCalculation0.visit((CurrencyConverter) null, (DividendFinalTransaction) null);
      assertEquals(0L, sharesHeldCalculation0.getSharesHeld());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SharesHeldCalculation sharesHeldCalculation0 = new SharesHeldCalculation();
      LinkedList<AccountTransaction> linkedList0 = new LinkedList<AccountTransaction>();
      AccountTransaction accountTransaction0 = new AccountTransaction();
      linkedList0.add(accountTransaction0);
      sharesHeldCalculation0.visitAll((CurrencyConverter) null, linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DividendCalculation dividendCalculation0 = new DividendCalculation();
      PortfolioTransaction portfolioTransaction0 = new PortfolioTransaction();
      dividendCalculation0.visit((CurrencyConverter) null, portfolioTransaction0);
      assertNull(dividendCalculation0.getTermCurrency());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SharesHeldCalculation sharesHeldCalculation0 = new SharesHeldCalculation();
      sharesHeldCalculation0.visit((CurrencyConverter) null, (DividendTransaction) null);
      assertEquals(0L, sharesHeldCalculation0.getSharesHeld());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DividendCalculation dividendCalculation0 = new DividendCalculation();
      dividendCalculation0.visit((CurrencyConverter) null, (DividendInitialTransaction) null);
      assertEquals(0, dividendCalculation0.getNumOfEvents());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<DividendCalculation> class0 = DividendCalculation.class;
      LinkedList<DividendFinalTransaction> linkedList0 = new LinkedList<DividendFinalTransaction>();
      // Undeclared exception!
      try { 
        Calculation.perform(class0, (CurrencyConverter) null, (Security) null, (List<? extends Transaction>) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("name.abuchen.portfolio.snapshot.security.Calculation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SharesHeldCalculation sharesHeldCalculation0 = new SharesHeldCalculation();
      sharesHeldCalculation0.finish();
      assertNull(sharesHeldCalculation0.getTermCurrency());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IRRCalculation iRRCalculation0 = new IRRCalculation();
      Security security0 = iRRCalculation0.getSecurity();
      assertNull(security0);
  }
}
