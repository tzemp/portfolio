/*
 * This file was automatically generated by EvoSuite
 * Mon May 25 19:33:52 GMT 2020
 */

package name.abuchen.portfolio.snapshot.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.util.List;
import name.abuchen.portfolio.model.Security;
import name.abuchen.portfolio.money.CurrencyConverter;
import name.abuchen.portfolio.money.Money;
import name.abuchen.portfolio.snapshot.security.DividendCalculation;
import name.abuchen.portfolio.snapshot.security.DividendTransaction;
import name.abuchen.portfolio.snapshot.security.SecurityPerformanceRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DividendCalculation_ESTest extends DividendCalculation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      DividendCalculation.DividendPayment dividendCalculation_DividendPayment0 = null;
      try {
        dividendCalculation_DividendPayment0 = new DividendCalculation.DividendPayment((CurrencyConverter) null, dividendTransaction0, (Security) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DividendCalculation dividendCalculation0 = new DividendCalculation();
      dividendCalculation0.setTermCurrency("0I6*g:P&#UK0h;");
      Money money0 = dividendCalculation0.getSum();
      assertEquals(0L, money0.getAmount());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DividendCalculation dividendCalculation0 = new DividendCalculation();
      LocalDate localDate0 = dividendCalculation0.getLastDividendPayment();
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DividendCalculation dividendCalculation0 = new DividendCalculation();
      dividendCalculation0.finish();
      SecurityPerformanceRecord.Periodicity securityPerformanceRecord_Periodicity0 = dividendCalculation0.getPeriodicity();
      assertEquals(SecurityPerformanceRecord.Periodicity.NONE, securityPerformanceRecord_Periodicity0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DividendCalculation dividendCalculation0 = new DividendCalculation();
      // Undeclared exception!
      try { 
        dividendCalculation0.getSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("name.abuchen.portfolio.snapshot.security.DividendCalculation", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DividendCalculation dividendCalculation0 = new DividendCalculation();
      DividendTransaction dividendTransaction0 = new DividendTransaction();
      // Undeclared exception!
      try { 
        dividendCalculation0.visit((CurrencyConverter) null, dividendTransaction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DividendCalculation dividendCalculation0 = new DividendCalculation();
      List<DividendCalculation.DividendPayment> list0 = dividendCalculation0.getPayments();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DividendCalculation dividendCalculation0 = new DividendCalculation();
      dividendCalculation0.getPeriodicity();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DividendCalculation dividendCalculation0 = new DividendCalculation();
      int int0 = dividendCalculation0.getNumOfEvents();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DividendCalculation dividendCalculation0 = new DividendCalculation();
      double double0 = dividendCalculation0.getRateOfReturnPerYear();
      assertEquals(0.0, double0, 0.01);
  }
}
