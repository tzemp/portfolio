/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 11:48:44 GMT 2020
 */

package name.abuchen.portfolio.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.util.LinkedList;
import java.util.List;
import name.abuchen.portfolio.math.IRR;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IRR_ESTest extends IRR_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<LocalDate> linkedList0 = new LinkedList<LocalDate>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(6581L);
      linkedList0.add(localDate0);
      Double double0 = new Double(0.0);
      linkedList1.add(double0);
      double double1 = IRR.calculate(linkedList0, linkedList1);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<LocalDate> linkedList0 = new LinkedList<LocalDate>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double((-1463.141519));
      linkedList1.add(double0);
      LocalDate localDate0 = MockLocalDate.now();
      linkedList0.add(localDate0);
      double double1 = IRR.calculate(linkedList0, linkedList1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<LocalDate> linkedList0 = new LinkedList<LocalDate>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-462L));
      linkedList0.add(localDate0);
      Double double0 = new Double(200.70566);
      linkedList1.add(double0);
      double double1 = IRR.calculate(linkedList0, linkedList1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<LocalDate> linkedList0 = new LinkedList<LocalDate>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList0.add((LocalDate) null);
      Double double0 = linkedList1.pollLast();
      linkedList1.add(double0);
      linkedList0.add((LocalDate) null);
      linkedList1.add((Double) null);
      // Undeclared exception!
      try { 
        IRR.calculate(linkedList0, linkedList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("name.abuchen.portfolio.util.Dates", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      // Undeclared exception!
      try { 
        IRR.calculate((List<LocalDate>) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // dates and/or values are null
         //
         verifyException("name.abuchen.portfolio.math.NPVFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<LocalDate> linkedList0 = new LinkedList<LocalDate>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      // Undeclared exception!
      try { 
        IRR.calculate(linkedList0, linkedList1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // at least one data point must be provided
         //
         verifyException("name.abuchen.portfolio.math.NPVFunction", e);
      }
  }
}
